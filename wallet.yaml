openapi: 3.0.3
info:
  title: Wallet manager
  description: Wallet manager
  version: 1.0.0
servers:
  - url: 'https://www.wallet_manager.com'
paths:
  /bank_account:
    get:
      tags:
        - Bank account
      summary: Retrieve all bank accounts
      operationId: GetAllAccounts
      responses:
        200:
          $ref: '#/components/responses/ReturnBankAccount'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    post:
      tags:
        - Bank account
      summary: Create a new bank account
      operationId: CreateAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_setter'
      responses:
        200:
          $ref: '#/components/responses/ReturnBankAccount'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Bank account
      summary: Create or Update an existing bank account
      operationId: CreateUpdateAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_setter'
      responses:
        200:
          $ref: '#/components/responses/ReturnBankAccount'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Bank account
      summary: Delete a bank account
      operationId: DeleteAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/responses/ReturnBankAccount'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /currency:
    get:
      tags:
        - Currency
      summary: Retrieve all currencies
      responses:
        200:
          $ref: '#/components/responses/ReturnCurrency'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    post:
      tags:
        - Currency
      summary: Create a new currency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/responses/ReturnCurrency'
      responses:
        200:
          $ref: '#/components/responses/ReturnCurrency'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Currency
      summary: Update an existing currency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/currency_setter'
      responses:
        200:
          $ref: '#/components/responses/ReturnCurrency'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Currency
      summary: Delete a currency
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/responses/ReturnCurrency'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /transaction:
    get:
      tags:
        - Transaction
      summary: Retrieve all transactions
      responses:
        200:
          $ref: '#/components/responses/ReturnTransaction'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    post:
      tags:
        - Transaction
      summary: Create a new transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction_setter'
      responses:
        200:
          $ref: '#/components/responses/ReturnTransaction'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Transaction
      summary: Update an existing transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction_setter'
      responses:
        200:
          $ref: '#/components/responses/ReturnTransaction'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Transaction
      summary: Delete a transaction
      operationId: DeleteTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/responses/ReturnTransaction'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
components:
  responses:
    ReturnBankAccount:
      description: return one bank account
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/TemplateResponseBody'
            properties:
              status:
                example:
                  code: 200
                  message: OK
              body:
                $ref: '#/components/schemas/account'
    ReturnCurrency:
      description: Return one currency
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/TemplateResponseBody'
            properties:
              status:
                example:
                  code: 200
                  message: OK
              body:
                $ref: '#/components/schemas/currency'
    ReturnTransaction:
      description: Return one transaction
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/TemplateResponseBody'
            properties:
              status:
                example:
                  code: 200
                  message: OK
              body:
                $ref: '#/components/schemas/transaction_getter'
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TemplateResponseBody'
          example:
            status:
              code: 400
              message: Bad request
            body: { }
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TemplateResponseBody'
          example:
            status:
              code: 403
              message: Forbidden
            body: { }
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TemplateResponseBody'
          example:
            status:
              code: 500
              message: Internal server error
            body: { }
  schemas:
    # utils
    StatusMessage:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    TemplateResponseBody:
      properties:
        status:
          $ref: '#/components/schemas/StatusMessage'
        body:
          type: object
    # currency components
    currency_setter:
      type: object
      properties:
        name:
          type: string
        country:
          type: string
      required:
        - name
    currency:
      type: object
      allOf:
        - $ref: '#/components/schemas/currency_setter'
        - type: object
          properties:
            id:
              type: integer
    # account components
    account_setter:
      type: object
      properties:
        name:
          type: string
        current_amount:
          type: number
          format: double
        type: # account type
          type: string
        account_number:
          type: string
        currency_id:
          type: integer
    account:
      type: object
      allOf:
        - $ref: '#/components/schemas/account_setter'
        - type: object
          properties:
            id:
              type: integer
            creation_timestamp:
              type: string
              format: 'date-time'
            currency_id:
              $ref: '#/components/schemas/currency'
    # transaction components
    transaction_tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    transaction_type:
      type: object
      enum:
        - transfer
        - claim
        - spend
    transaction:
      type: object
      properties:
        amount:
          type: number
          format: double
        type:
          $ref: '#/components/schemas/transaction_type'
    transaction_setter:
      type: object
      allOf:
        - $ref: '#/components/schemas/transaction'
        - type: object
          properties:
            tag_id:
              type: integer
            transfer_to:
              type: integer
            account_id:
              type: integer
    transaction_getter:
      type: object
      allOf:
        - $ref: '#/components/schemas/transaction'
        - type: object
          properties:
            id:
              type: integer
            tag_id:
              $ref: '#/components/schemas/transaction_tag'
            transfer_to:
              $ref: '#/components/schemas/account'
            account_id:
              $ref: '#/components/schemas/account'
            creation_timestamp:
              type: string
              format: 'date-time'
